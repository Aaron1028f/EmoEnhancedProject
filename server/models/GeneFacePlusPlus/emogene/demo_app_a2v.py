# testing client for video generation (generated by gemini)


import gradio as gr
import requests
import os
import shutil
import uuid
from urllib.parse import urljoin

# --- 設定 ---
# 你的 API 伺服器運行的位址和端口
SERVER_HOST = "http://127.0.0.1:7860"
# API 端點
API_ENDPOINT = "/generate_video"
# 完整的 API URL
SERVER_URL = urljoin(SERVER_HOST, API_ENDPOINT)

# 用於存放客戶端上傳檔案的目錄 (伺服器需要能存取到)
CLIENT_UPLOADS_DIR = "api_client_uploads"

# 建立上傳目錄
os.makedirs(CLIENT_UPLOADS_DIR, exist_ok=True)


def generate_video_from_api(audio_filepath):
    """
    呼叫後端 API 來生成影片。
    
    Args:
        audio_filepath (str): Gradio 提供的使用者上傳音訊的暫存路徑。

    Returns:
        str: 由 API 回傳的生成影片的路徑，或在失敗時返回 None。
    """
    if audio_filepath is None:
        raise gr.Error("請先上傳一個音訊檔！")

    print(f"客戶端：接收到暫存音訊檔位於 {audio_filepath}")

    try:
        # 1. 將暫存檔複製到一個穩定的、伺服器可存取的位置
        # 產生一個獨一無二的檔名以避免衝突
        file_extension = os.path.splitext(audio_filepath)[1]
        stable_filename = f"{uuid.uuid4()}{file_extension}"
        stable_filepath = os.path.join(CLIENT_UPLOADS_DIR, stable_filename)
        
        shutil.copy(audio_filepath, stable_filepath)
        print(f"客戶端：已將檔案複製到穩定路徑 {stable_filepath}")
        
        # 獲取絕對路徑，確保伺服器能正確解析
        absolute_filepath = os.path.abspath(stable_filepath)

        # 2. 準備發送到 API 的 JSON 資料
        payload = {
            "audio_path": absolute_filepath,
            "mouth_amp": 0.5 # 你可以在這裡或UI上提供更多參數
        }
        
        print(f"客戶端：正在向 {SERVER_URL} 發送請求...")
        print(f"客戶端：請求內容 (Payload): {payload}")

        # 3. 呼叫 API
        # 設定一個較長的超時時間，因為影片生成需要時間
        response = requests.post(SERVER_URL, json=payload, timeout=600)
        response.raise_for_status()  # 如果狀態碼不是 2xx，則引發異常

        # 4. 解析 API 回應
        result = response.json()
        print(f"客戶端：收到來自伺服器的回應: {result}")
        
        video_path = result.get("video_path")
        error_message = result.get("error")

        if error_message:
            raise gr.Error(f"伺服器端發生錯誤: {error_message}")
        
        if not video_path or not os.path.exists(video_path):
            raise gr.Error("伺服器未回傳有效的影片路徑，或檔案不存在。")

        print(f"客戶端：成功取得影片路徑: {video_path}")
        return video_path

    except requests.exceptions.RequestException as e:
        print(f"客戶端：API 呼叫失敗: {e}")
        raise gr.Error(f"無法連接到伺服器或網路錯誤: {e}")
    except Exception as e:
        print(f"客戶端：發生未知錯誤: {e}")
        raise gr.Error(f"處理過程中發生錯誤: {e}")


# 建立 Gradio Client UI
with gr.Blocks() as demo:
    gr.Markdown(
        "# GeneFace++ API 客戶端\n"
        "這個介面用於測試後端的 GeneFace++ API 服務。"
    )
    
    with gr.Row():
        with gr.Column():
            audio_input = gr.Audio(
                type="filepath", 
                label="上傳音訊檔 (Upload Audio File)"
            )
            submit_btn = gr.Button("透過 API 生成影片 (Generate via API)", variant="primary")
        
        with gr.Column():
            video_output = gr.Video(
                label="由 API 生成的影片 (Generated Video from API)"
            )

    submit_btn.click(
        fn=generate_video_from_api,
        inputs=[audio_input],
        outputs=[video_output]
    )

if __name__ == "__main__":
    print(f"客戶端啟動，將會呼叫位於 {SERVER_URL} 的 API 服務。")
    # 你可以為客戶端指定一個不同的端口，以避免與伺服器衝突
    demo.launch(server_name="127.0.0.1", server_port=8001)